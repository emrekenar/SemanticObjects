

class Task(String name) end

class Server(ExplList<Task> taskList)
    Task excessive()
        Task ret = this.taskList.content;
        this.taskList = this.taskList.next;
        return ret;
    end
    Int add(Task task)
        this.taskList = new ExplList<Task>(task, this.taskList);
        return 0;
    end
end
class Scheduler(List<Server> serverList)
    Int reschedule()
        List<Server> over = access("SELECT ?obj WHERE{?obj a domain:Overloaded }");
        //breakpoint;
        List<Task> tasks = this.collectExcessiveTasks(over);
        //breakpoint;
        tasks = this.rescheduleTasks(tasks, over);
        //breakpoint;
        while tasks != null do
            ExplList<Task> l = new ExplList<Task>(tasks.content, null);
            Server n = new Server(l);
            this.serverList = new List<Server>(n, this.serverList);
            tasks = tasks.next;
        end
        return 0;
    end

    List<Task> collectExcessiveTasks(List<Server> overloaded)
       List<Server> plats = this.serverList;
       List<Task> exc = null;
       while plats != null do
            Boolean b = overloaded.contains(plats.content);
            //breakpoint;
            if b then
                Task localExc = plats.content.excessive();
                exc = new List<Task>(localExc, exc);
            end
            plats = plats.next;
       end
       return exc;
    end

    List<Task> rescheduleTasks(List<Task> tasks, List<Server> overloaded)
       List<Server> plats = this.serverList;
       while plats != null do
            Boolean b = overloaded.contains(plats.content);
            if b then
                skip;
            else
                plats.content.add(tasks.content);
                tasks = tasks.next;
            end
            plats = plats.next;
            if tasks == null then return null; end
       end
       return tasks;
    end
end

main
    Task task1 = new Task("t1");
    Task task2 = new Task("t2");
    Task task3 = new Task("t3");
    Task task4 = new Task("t4");
    Task task5 = new Task("t5");
    Task task6 = new Task("t6");

    ExplList<Task> l1 = new ExplList<Task>(task1, null);
    ExplList<Task> l2 = new ExplList<Task>(task2, null);
    ExplList<Task> l3 = new ExplList<Task>(task3, l2);
    ExplList<Task> l4 = new ExplList<Task>(task4, null);
    ExplList<Task> l5 = new ExplList<Task>(task5, l4);
    ExplList<Task> l6 = new ExplList<Task>(task6, l5);

    Server dummy = new Server(null);
    Server server1 = new Server(l1);
    Server server2 = new Server(l3);
    Server server3 = new Server(l6);
    List<Server> sl1 = new List<Server>(server3, null);
    List<Server> sl2 = new List<Server>(server2, sl1);
    List<Server> sl3 = new List<Server>(server1, sl2);

    Scheduler sch = new Scheduler(sl3);
    breakpoint;
    List<Server> pre = access("SELECT ?obj WHERE{?obj a domain:Overloaded }");
    sch.reschedule();
    List<Server> post = access("SELECT ?obj WHERE{?obj a domain:Overloaded }");
    breakpoint;
    print(sch);
end
